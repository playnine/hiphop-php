/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Hyves (http://www.hyves.nl)                       |
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXT_LIBREDIS_H__
#define __EXT_LIBREDIS_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/base/base_includes.h>
#include <libredis/redis.h>
namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

Object f_libredis();

///////////////////////////////////////////////////////////////////////////////
// class _Libredis_Ketama

FORWARD_DECLARE_CLASS(_Libredis_Ketama);
class c__Libredis_Ketama : public ExtObjectData, public Sweepable {
 public:
  BEGIN_CLASS_MAP(_Libredis_Ketama)
  END_CLASS_MAP(_Libredis_Ketama)
  DECLARE_CLASS(_Libredis_Ketama, _Libredis_Ketama, ObjectData)

  // need to implement
  public: c__Libredis_Ketama();
  public: ~c__Libredis_Ketama();
  public: void t___construct();
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: void t_add_server(CStrRef host, int port, int weight);
  DECLARE_METHOD_INVOKE_HELPERS(add_server);
  public: int t_get_server_ordinal(CStrRef key);
  DECLARE_METHOD_INVOKE_HELPERS(get_server_ordinal);
  public: String t_get_server_address(int ordinal);
  DECLARE_METHOD_INVOKE_HELPERS(get_server_address);
  public: void t_create_continuum();
  DECLARE_METHOD_INVOKE_HELPERS(create_continuum);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c__Libredis_Ketama *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

 public:
  Ketama *getKetama();

 private:
  Ketama *m_ketama;
};

///////////////////////////////////////////////////////////////////////////////
// class _Libredis_Executor

FORWARD_DECLARE_CLASS(_Libredis_Executor);
class c__Libredis_Executor : public ExtObjectData, public Sweepable {
 public:
  BEGIN_CLASS_MAP(_Libredis_Executor)
  END_CLASS_MAP(_Libredis_Executor)
  DECLARE_CLASS(_Libredis_Executor, _Libredis_Executor, ObjectData)

  // need to implement
  public: c__Libredis_Executor();
  public: ~c__Libredis_Executor();
  public: void t___construct();
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: Variant t_add(CObjRef connection, CObjRef batch);
  DECLARE_METHOD_INVOKE_HELPERS(add);
  public: Variant t_execute(int timeout = 5000);
  DECLARE_METHOD_INVOKE_HELPERS(execute);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c__Libredis_Executor *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

 public:
  Executor *getExecutor();

 private:
  Executor *m_executor;
};

///////////////////////////////////////////////////////////////////////////////
// class _Libredis_Connection

FORWARD_DECLARE_CLASS(_Libredis_Connection);
class c__Libredis_Connection : public ExtObjectData, public Sweepable {
 public:
  BEGIN_CLASS_MAP(_Libredis_Connection)
  END_CLASS_MAP(_Libredis_Connection)
  DECLARE_CLASS(_Libredis_Connection, _Libredis_Connection, ObjectData)

  // need to implement
  public: c__Libredis_Connection();
  public: ~c__Libredis_Connection();
  public: void t___construct(CStrRef address);
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: bool t_execute(CObjRef batch, int timeout = 5000);
  DECLARE_METHOD_INVOKE_HELPERS(execute);
  public: Variant t_set(CStrRef key, CStrRef value, int timeout = 5000);
  DECLARE_METHOD_INVOKE_HELPERS(set);
  public: Variant t_get(CStrRef key, int timeout = 5000);
  DECLARE_METHOD_INVOKE_HELPERS(get);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c__Libredis_Connection *create(String address);
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

 public:
  Connection *getConnection();
  bool executeSimple(Batch *batch, int timeout);

 private:
  class ConnectionWrapper {
   public:
    ConnectionWrapper(Connection *c);
    ~ConnectionWrapper();
    Connection *connection;
  };
  typedef boost::shared_ptr<ConnectionWrapper> ConnectionPtr;

  ConnectionPtr m_connection;

  typedef std::map<std::string, ConnectionPtr> ConnectionMap;
  static DECLARE_THREAD_LOCAL(ConnectionMap, s_persistentMap);
};

///////////////////////////////////////////////////////////////////////////////
// class _Libredis_Batch

FORWARD_DECLARE_CLASS(_Libredis_Batch);
class c__Libredis_Batch : public ExtObjectData, public Sweepable {
 public:
  BEGIN_CLASS_MAP(_Libredis_Batch)
  END_CLASS_MAP(_Libredis_Batch)
  DECLARE_CLASS(_Libredis_Batch, _Libredis_Batch, ObjectData)

  // need to implement
  public: c__Libredis_Batch();
  public: ~c__Libredis_Batch();
  public: void t___construct();
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: void t_write(CStrRef str, int num_commands = 0);
  DECLARE_METHOD_INVOKE_HELPERS(write);
  public: Object t_set(CStrRef key, CStrRef value);
  DECLARE_METHOD_INVOKE_HELPERS(set);
  public: Object t_get(CStrRef key);
  DECLARE_METHOD_INVOKE_HELPERS(get);
  public: void t_cmd(int _argc, CArrRef _argv = null_array);
  DECLARE_METHOD_INVOKE_HELPERS(cmd);
  public: int t_next_reply(Variant reply_type, Variant reply_value, Variant reply_length);
  DECLARE_METHOD_INVOKE_HELPERS(next_reply);
  public: bool t_execute(CObjRef connection, int timeout = 5000);
  DECLARE_METHOD_INVOKE_HELPERS(execute);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c__Libredis_Batch *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

 public:
  Batch *getBatch();

 private:
  Batch *m_batch;
};

///////////////////////////////////////////////////////////////////////////////
// class _Libredis_Redis

FORWARD_DECLARE_CLASS(_Libredis_Redis);
class c__Libredis_Redis : public ExtObjectData, public Sweepable {
 public:
  BEGIN_CLASS_MAP(_Libredis_Redis)
  END_CLASS_MAP(_Libredis_Redis)
  DECLARE_CLASS(_Libredis_Redis, _Libredis_Redis, ObjectData)

  // need to implement
  public: c__Libredis_Redis();
  public: ~c__Libredis_Redis();
  public: void t___construct();
  DECLARE_METHOD_INVOKE_HELPERS(__construct);
  public: Object t_create_ketama();
  DECLARE_METHOD_INVOKE_HELPERS(create_ketama);
  public: Object t_create_executor();
  DECLARE_METHOD_INVOKE_HELPERS(create_executor);
  public: String t_last_error();
  DECLARE_METHOD_INVOKE_HELPERS(last_error);
  public: Object t_get_connection(CStrRef addr);
  DECLARE_METHOD_INVOKE_HELPERS(get_connection);
  public: Object t_create_batch(CStrRef str = null_string, int num_commands = 0);
  DECLARE_METHOD_INVOKE_HELPERS(create_batch);
  public: Variant t___destruct();
  DECLARE_METHOD_INVOKE_HELPERS(__destruct);

  // implemented by HPHP
  public: c__Libredis_Redis *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env,
                                    const Eval::FunctionCallExpression *call);
  public: void getConstructor(MethodCallPackage &mcp);
  public: virtual void destruct();

 public:
  static void updateLastError();

 private:
  static DECLARE_THREAD_LOCAL(std::string, m_lastError);
};

///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_LIBREDIS_H__
